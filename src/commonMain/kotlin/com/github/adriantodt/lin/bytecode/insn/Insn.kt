package com.github.adriantodt.lin.bytecode.insn

import com.github.adriantodt.lin.utils.Serializable

sealed class Insn : Serializable {
    override fun toString(): String {
        return this::class.simpleName ?: super.toString()
    }

    enum class Opcode {
        PARAMETERLESS, SIMPLE, ASSIGN, BRANCH_IF_FALSE, BRANCH_IF_TRUE, DECLARE_VARIABLE_IMMUTABLE,
        DECLARE_VARIABLE_MUTABLE, GET_MEMBER_PROPERTY, GET_SUBSCRIPT, GET_VARIABLE, INVOKE, INVOKE_LOCAL, INVOKE_MEMBER,
        JUMP, LOAD_DOUBLE, LOAD_FLOAT, LOAD_INT, LOAD_LONG, LOAD_STRING, NEW_FUNCTION, PUSH_DOUBLE, PUSH_FLOAT, PUSH_INT,
        PUSH_LONG, PUSH_EXCEPTION_HANDLING, PUSH_LOOP_HANDLING, SET_MEMBER_PROPERTY, SET_SUBSCRIPT, SET_VARIABLE
    }

    enum class ParameterlessCode {
        ARRAY_INSERT, BREAK, CHECK_NOT_NULL, CONTINUE, DUP, NEW_ARRAY, NEW_OBJECT, OBJECT_INSERT, POP,
        POP_SCOPE, POP_EXCEPTION_HANDLING, POP_LOOP_HANDLING, PUSH_NULL, PUSH_SCOPE, PUSH_THIS, RETURN,
        THROW, TYPEOF
    }

    enum class SimpleCode {
        UNARY_OPERATION, BINARY_OPERATION, PUSH_BOOLEAN, PUSH_CHAR
    }
}
